강의 10

-클래스의 상속

*수퍼 클래스 : 속성과 함수를 물려주는 쪽
**서브 클래스 : 속성과 함수를 물려받는 쪽

코틀린은 상속금지가 기본값 --> open 키워드를 이용하여서 상속을 가능하게함

상속의 규칙 1) 수퍼 클래스에 존재하는 속성과 같은 이름의 속성을 가질 수 없음
                2) 서브 클래스 생성시에는 무조건 수퍼클래스의 생성자까지 호출되어야함

------------------------------------------------
(상속 기초)
fun main() {
    
    var a = Animal("별이",5,"개")
    var b = Dog("별이",5)
	var c = Cat("냐옹이",4)
    a.Introduce()
    b.Introduce()
    b.bark()
    c.meow()
}

open class Animal (var name:String, var age:Int, var type:String){
    
	fun Introduce(){
        println("저는 ${type} ${name}이고, ${age}살 입니다. ")
    }
    
}

class Dog (name:String, age:Int) : Animal (name,age,"개"){
    
    fun bark() {
        println("멍멍")
    }
}

class Cat (name:String, age:Int) : Animal (name,age,"고양이"){
    
    fun meow() {
        println("야옹")
    }
}


출력값      저는 개 별이이고, 5살 입니다. 
	      저는 개 별이이고, 5살 입니다. 
                멍멍
                야옹
------------------------------------------------

=====================================================
강의 11

-오버라이딩 : 서브클래스에서 수퍼클래스와 같은 이름과 형태로 된 함수를 재구현하게 하는 키워드
--> open & override 키워드 이용

------------------------------------------------
(override 코드)
fun main() {
    
    var t = Tiger()
    
    t.eat()
    
    
}

open class Animal{
    open fun eat(){
        println("음식을 먹습니다.")
    }
}

class Tiger : Animal(){
    
    override fun eat(){
        println("고기를 먹습니다.")
    }
}

출력: 고기를 먹습니다.
------------------------------------------------

-추상화 : 수퍼클래스에서는 함수의 구체적인 구현이 없고 서브클래스에선 수퍼클래스에 있는 함수가 모두 존재해야한다. --> abstract 키워드 사용

%추상화로 만들어진 추상 클래스는 단독으로 사용이 불가하다 --> 무조건 서브클래스를 통해 사용

------------------------------------------------
(abstract 키워드 사용)
fun main() {
    
	var r = Rabbit()
    
    r.eat()
    r.sniff()
    
    
}

abstract class Animal {
    abstract fun eat()
    fun sniff() {
        println("킁킁")
    }
}

class Rabbit : Animal() {
    override fun eat() {
        println("당근을 먹습니다.")
    }
}

출력 : ​당근을 먹습니다.
	킁킁
------------------------------------------------

-인터페이스 : 속성,추상함수,일반함수 모두 가질 수 있음
	--> only in Kotlin, 생성자를 가질 수 없음
	--> 구현부가 있는 함수 : open 함수로 간주
	    구현부가 없는 함수 : abstract 함수로 간주
	--> 한번에 여러 인터페이스를 상속 시킬 수 있음

------------------------------------------------
(인터페이스 키워드 사용)
fun main() {
    
    var dog = Dog()
    
    dog.run()
    dog.eat()

    
}

interface Runner {
    fun run()  // 구현부 x
}

interface Eater {
    fun eat(){
        println("음식을 먹습니다.") // 구현부 o
    }
}

class Dog : Runner, Eater {
    override fun run() {
        println("우다다다 뜁니다.")
    }
    override fun eat() {
        println("허겁지겁 먹습니다.")  //구현부 재정의
    }
}

출력 : 우다다다 뜁니다.
	허겁지겁 먹습니다.
------------------------------------------------

=================================================================
-강의 12

1)물리적 구조 : 프로젝트 > 모듈 > 폴더(코틀린 코드, 모듈관련 설정, 리소스 파일)

2)논리적 구조 : 패키지 --> 소스 코드의 소속 지정을 위한 논리적 단위 ("package  패키지명(자유롭게)" 형태로 사용)

+import 키워드를 통해 다른 패키지에 있는 변수,함수,클래스 등을 사용가능하다.(import 패키지명)
